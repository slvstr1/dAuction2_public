# from django.test import TestCase
#
# from django.test.client import RequestFactory
# from django.core.cache import cache
# from dAuction2.models import Offer, Voucher, Player_stats, Distribution, Phase, User, Timer
# # import collections
# from collections import OrderedDict
# data={'vouchers': [OrderedDict([('id', 281), ('idd', 1), ('value_cum', 0.0), ('value', 0.0), ('auction', 1)]), OrderedDict([('id', 282), ('idd', 2), ('value_cum', 0.0), ('value', 0.0), ('auction', 1)]), OrderedDict([('id', 283), ('idd', 3), ('value_cum', 0.1), ('value', 0.1), ('auction', 1)]), OrderedDict([('id', 284), ('idd', 4), ('value_cum', 0.4), ('value', 0.3), ('auction', 1)]), OrderedDict([('id', 285), ('idd', 5), ('value_cum', 1.1), ('value', 0.7), ('auction', 1)]), OrderedDict([('id', 286), ('idd', 6), ('value_cum', 2.8), ('value', 1.7), ('auction', 1)]), OrderedDict([('id', 287), ('idd', 7), ('value_cum', 5.8), ('value', 3.0), ('auction', 1)]), OrderedDict([('id', 288), ('idd', 8), ('value_cum', 10.7), ('value', 4.9), ('auction', 1)]), OrderedDict([('id', 289), ('idd', 9), ('value_cum', 18.2), ('value', 7.5), ('auction', 1)]), OrderedDict([('id', 290), ('idd', 10), ('value_cum', 29.2), ('value', 11.0), ('auction', 1)]), OrderedDict([('id', 291), ('idd', 11), ('value_cum', 44.0), ('value', 14.8), ('auction', 1)]), OrderedDict([('id', 292), ('idd', 12), ('value_cum', 65.0), ('value', 21.0), ('auction', 1)]), OrderedDict([('id', 293), ('idd', 13), ('value_cum', 92.0), ('value', 27.0), ('auction', 1)]), OrderedDict([('id', 294), ('idd', 14), ('value_cum', 127.0), ('value', 35.0), ('auction', 1)]), OrderedDict([('id', 295), ('idd', 15), ('value_cum', 171.0), ('value', 44.0), ('auction', 1)]), OrderedDict([('id', 296), ('idd', 16), ('value_cum', 225.0), ('value', 54.0), ('auction', 1)]), OrderedDict([('id', 297), ('idd', 17), ('value_cum', 291.0), ('value', 66.0), ('auction', 1)]), OrderedDict([('id', 298), ('idd', 18), ('value_cum', 371.0), ('value', 80.0), ('auction', 1)]), OrderedDict([('id', 299), ('idd', 19), ('value_cum', 465.0), ('value', 94.0), ('auction', 1)]), OrderedDict([('id', 300), ('idd', 20), ('value_cum', 580.0), ('value', 115.0), ('auction', 1)]), OrderedDict([('id', 301), ('idd', 21), ('value_cum', 710.0), ('value', 130.0), ('auction', 1)]), OrderedDict([('id', 302), ('idd', 22), ('value_cum', 865.0), ('value', 155.0), ('auction', 1)]), OrderedDict([('id', 303), ('idd', 23), ('value_cum', 1040.0), ('value', 175.0), ('auction', 1)]), OrderedDict([('id', 304), ('idd', 24), ('value_cum', 1245.0), ('value', 205.0), ('auction', 1)]), OrderedDict([('id', 305), ('idd', 25), ('value_cum', 1475.0), ('value', 230.0), ('auction', 1)]), OrderedDict([('id', 306), ('idd', 26), ('value_cum', 1735.0), ('value', 260.0), ('auction', 1)]), OrderedDict([('id', 307), ('idd', 27), ('value_cum', 2030.0), ('value', 295.0), ('auction', 1)]), OrderedDict([('id', 308), ('idd', 28), ('value_cum', 2360.0), ('value', 330.0), ('auction', 1)]), OrderedDict([('id', 309), ('idd', 29), ('value_cum', 2730.0), ('value', 370.0), ('auction', 1)]), OrderedDict([('id', 310), ('idd', 30), ('value_cum', 3145.0), ('value', 415.0), ('auction', 1)]), OrderedDict([('id', 311), ('idd', 31), ('value_cum', 3600.0), ('value', 455.0), ('auction', 1)]), OrderedDict([('id', 312), ('idd', 32), ('value_cum', 4100.0), ('value', 500.0), ('auction', 1)]), OrderedDict([('id', 313), ('idd', 33), ('value_cum', 4660.0), ('value', 560.0), ('auction', 1)]), OrderedDict([('id', 314), ('idd', 34), ('value_cum', 5270.0), ('value', 610.0), ('auction', 1)]), OrderedDict([('id', 315), ('idd', 35), ('value_cum', 5940.0), ('value', 670.0), ('auction', 1)])], 'all_offers_ser': [], 'player_stats': [OrderedDict([('id', 644), ('period', 61), ('profit', 0.0), ('player_demand', 26), ('penalty', 0.0), ('trading_result', 0), ('total_values', 0.0), ('vouchers_negative', 0), ('vouchers_used', 0), ('role', 1), ('total_cost', 0.0)])], 'timer': -10, 'period': {'total_demand': 103, 'id': 61, 'auction': 1, 'idd': 1}, 'auction': {'max_vouchers': 35, 'a': 0.017777777777, 'd_draws_needed': 50, 'mu': 60.0, 'short_maximum': 15, 'retail_price': 96, 'auction_started': False, 'app_forward_and_spot': True, 'convexity_parameter': 4, 'PR_per_group': 4, 'sigma': 20.0}, 'phase': {'question_page': True, 'waiting_page': False, 'end': False, 'idd': 1, 'period': 61, 'id': 59, 'auction': 1, 'nothing': True}, 'player': {'auction_id': 1, 'group_id': 8, 'user_id': 1, 'id': 112, 'app': 4, 'page': 0, 'player_ready': True, 'last_alive': -1, 'state': 1, 'role': 1, 'last_refresh_date': '2002-12-04T00:00:00Z'}}
#
#
# class PollsViewsTestCase(TestCase):
#     def test_auction_data_next(self):
#         rf = RequestFactory()
#         tt = Timer.objects.get_or_create(pk=1)[0]
#         tt.seconds_left =-1

#         # get_request = rf.get('/hello/')
#         # post_request = rf.post('/submit/', {'foo': 'bar'})
#         request = rf.post('/auction_data/',data)
#         request.POST._mutable = True
#         request.method = "POST"
#
#         resp = self.client.get('/polls/')
#         self.assertEqual(resp.status_code, 200)